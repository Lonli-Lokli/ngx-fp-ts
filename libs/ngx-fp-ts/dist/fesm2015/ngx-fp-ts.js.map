{"version":3,"file":"ngx-fp-ts.js","sources":["../../src/lib/common.ts","../../src/lib/if-either.ts","../../src/lib/if-option.ts","../../src/lib/ngx-fp-ts.module.ts","../../src/ngx-fp-ts.ts"],"sourcesContent":["import { EmbeddedViewRef, TemplateRef, ViewContainerRef, Éµstringify as stringify } from '@angular/core';\r\n\r\nexport interface IfContext {\r\n    $implicit: any;\r\n    ifTrue: boolean;\r\n}\r\nexport const initialIfContext = (): IfContext => ({\r\n    $implicit: null,\r\n    ifTrue: false,\r\n});\r\n\r\nexport interface Refs {\r\n    viewContainer: ViewContainerRef;\r\n    thenTemplateRef: TemplateRef<IfContext> | null;\r\n    elseTemplateRef: TemplateRef<IfContext> | null;\r\n    thenViewRef: EmbeddedViewRef<IfContext> | null;\r\n    elseViewRef: EmbeddedViewRef<IfContext> | null;\r\n}\r\nexport const initialRefs = (): Refs => ({\r\n    viewContainer: null,\r\n    thenTemplateRef: null,\r\n    elseTemplateRef: null,\r\n    thenViewRef: null,\r\n    elseViewRef: null,\r\n});\r\n\r\nexport function updateView(context: IfContext, refs: Refs) {\r\n    if (context.ifTrue) {\r\n        if (!refs.thenViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.elseViewRef = null;\r\n            if (refs.thenTemplateRef) {\r\n                refs.thenViewRef = refs.viewContainer.createEmbeddedView(refs.thenTemplateRef, context);\r\n            }\r\n        }\r\n    } else {\r\n        if (!refs.elseViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.thenViewRef = null;\r\n            if (refs.elseTemplateRef) {\r\n                refs.elseViewRef = refs.viewContainer.createEmbeddedView(refs.elseTemplateRef, context);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function assertTemplate(property: string, templateRef: TemplateRef<any> | null): void {\r\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\r\n    if (!isTemplateRefOrNull) {\r\n        throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\r\n    }\r\n}\r\n","import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { Either, isRight, isLeft } from 'fp-ts/Either';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifRight]' })\r\nexport class IfRight {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifRight(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifRight');\r\n        if (isRight(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.right;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.left;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifLeft]' })\r\nexport class IfLeft {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifLeft(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifLeft');\r\n        if (isLeft(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.left;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.right;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnEither(either: any, directiveName: string) {\r\n    const isAnEither = !!either && typeof either === 'object' && (isRight(either) || isLeft(either));\r\n    if (!isAnEither) {\r\n        throw new Error(`Error in ${directiveName} directive. ${either} is not an fp-ts Either!`);\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Option, isNone, isSome } from 'fp-ts/Option';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifSome]' })\r\nexport class IfSome {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifSome(option: Option<any>) {\r\n        testIsAnOption(option, 'ifSome');\r\n        if (isSome(option)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = option.value;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = undefined;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifNone]' })\r\nexport class IfNone {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifNone(option: Option<any>) {\r\n        testIsAnOption(option, 'ifNone');\r\n        this.context.$implicit = undefined;\r\n        if (isNone(option)) {\r\n            this.context.ifTrue = true;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnOption(option: any, directiveName: string) {\r\n    const isAnOption = !!option && typeof option === 'object' && (isSome(option) || isNone(option));\r\n    if (!isAnOption) {\r\n        throw new Error(`Error in ${directiveName} directive. ${option} is not an fp-ts Option!`);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\n\nimport { IfLeft, IfRight } from './if-either';\nimport { IfSome, IfNone } from './if-option';\n\nconst COMPONENTS = [IfLeft, IfRight, IfSome, IfNone];\n\n@NgModule({\n    declarations: COMPONENTS,\n    exports: COMPONENTS,\n})\nexport class NgxFpTsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["stringify"],"mappings":";;;;AAMO,MAAM,gBAAgB,GAAG,OAAkB;IAC9C,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,KAAK;CAChB,CAAC,CAAC;AASI,MAAM,WAAW,GAAG,OAAa;IACpC,aAAa,EAAE,IAAI;IACnB,eAAe,EAAE,IAAI;IACrB,eAAe,EAAE,IAAI;IACrB,WAAW,EAAE,IAAI;IACjB,WAAW,EAAE,IAAI;CACpB,CAAC,CAAC;SAEa,UAAU,CAAC,OAAkB,EAAE,IAAU;IACrD,IAAI,OAAO,CAAC,MAAM,EAAE;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;aAC3F;SACJ;KACJ;SAAM;QACH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;aAC3F;SACJ;KACJ;AACL,CAAC;SAEe,cAAc,CAAC,QAAgB,EAAE,WAAoC;IACjF,MAAM,mBAAmB,GAAG,CAAC,EAAE,CAAC,WAAW,IAAI,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC/E,IAAI,CAAC,mBAAmB,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,GAAG,QAAQ,yCAAyCA,UAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACnG;AACL;;MC7Ca,OAAO;IAKhB,YAAY,aAA+B,EAAE,WAAmC;QAJxE,YAAO,GAAG,gBAAgB,EAAE,CAAC;QAE7B,SAAI,GAAG,WAAW,EAAE,CAAC;QAGzB,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;KAC3C;IAED,IACI,OAAO,CAAC,MAAwB;QAChC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAClC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;YACjB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;SACzC;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;SACxC;QACD,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,WAAW,CAAC,WAA0C;QACtD,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,WAAW,CAAC,WAA0C;QACtD,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;;8DArCQ,OAAO;yCAAP,OAAO;+CAAP,OAAO;cADnB,SAAS;eAAC,EAAE,QAAQ,EAAE,WAAW,EAAE;uFAY5B,OAAO;kBADV,KAAK;YAcF,WAAW;kBADd,KAAK;YASF,WAAW;kBADd,KAAK;;MAUG,MAAM;IAKf,YAAY,aAA+B,EAAE,WAAmC;QAJxE,YAAO,GAAG,gBAAgB,EAAE,CAAC;QAE7B,SAAI,GAAG,WAAW,EAAE,CAAC;QAGzB,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;KAC3C;IAED,IACI,MAAM,CAAC,MAAwB;QAC/B,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACjC,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;SACxC;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;SACzC;QACD,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,UAAU,CAAC,WAA0C;QACrD,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,UAAU,CAAC,WAA0C;QACrD,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;;4DArCQ,MAAM;wCAAN,MAAM;+CAAN,MAAM;cADlB,SAAS;eAAC,EAAE,QAAQ,EAAE,UAAU,EAAE;uFAY3B,MAAM;kBADT,KAAK;YAcF,UAAU;kBADb,KAAK;YASF,UAAU;kBADb,KAAK;;AASV,SAAS,cAAc,CAAC,MAAW,EAAE,aAAqB;IACtD,MAAM,UAAU,GAAG,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,KAAK,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACjG,IAAI,CAAC,UAAU,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,YAAY,aAAa,eAAe,MAAM,0BAA0B,CAAC,CAAC;KAC7F;AACL;;MCtFa,MAAM;IAKf,YAAY,aAA+B,EAAE,WAAmC;QAJxE,YAAO,GAAG,gBAAgB,EAAE,CAAC;QAE7B,SAAI,GAAG,WAAW,EAAE,CAAC;QAGzB,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;KAC3C;IAED,IACI,MAAM,CAAC,MAAmB;QAC1B,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACjC,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;SACzC;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;SACtC;QACD,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,UAAU,CAAC,WAA0C;QACrD,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,UAAU,CAAC,WAA0C;QACrD,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;;4DArCQ,MAAM;wCAAN,MAAM;+CAAN,MAAM;cADlB,SAAS;eAAC,EAAE,QAAQ,EAAE,UAAU,EAAE;uFAY3B,MAAM;kBADT,KAAK;YAcF,UAAU;kBADb,KAAK;YASF,UAAU;kBADb,KAAK;;MAUG,MAAM;IAKf,YAAY,aAA+B,EAAE,WAAmC;QAJxE,YAAO,GAAG,gBAAgB,EAAE,CAAC;QAE7B,SAAI,GAAG,WAAW,EAAE,CAAC;QAGzB,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;KAC3C;IAED,IACI,MAAM,CAAC,MAAmB;QAC1B,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;QACnC,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;SAC/B;QACD,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,UAAU,CAAC,WAA0C;QACrD,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,IACI,UAAU,CAAC,WAA0C;QACrD,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC7B,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;;4DApCQ,MAAM;wCAAN,MAAM;+CAAN,MAAM;cADlB,SAAS;eAAC,EAAE,QAAQ,EAAE,UAAU,EAAE;uFAY3B,MAAM;kBADT,KAAK;YAaF,UAAU;kBADb,KAAK;YASF,UAAU;kBADb,KAAK;;AASV,SAAS,cAAc,CAAC,MAAW,EAAE,aAAqB;IACtD,MAAM,UAAU,GAAG,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,KAAK,MAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IAChG,IAAI,CAAC,UAAU,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,YAAY,aAAa,eAAe,MAAM,0BAA0B,CAAC,CAAC;KAC7F;AACL;;ACtFA,MAAM,UAAU,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;MAMxC,aAAa;;8CAAb,aAAa;sGAAb,aAAa;qFAAb,aAAa,mBANN,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,aAA/B,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM;+CAMtC,aAAa;cAJzB,QAAQ;eAAC;gBACN,YAAY,EAAE,UAAU;gBACxB,OAAO,EAAE,UAAU;aACtB;;;ACVD;;;;;;"}