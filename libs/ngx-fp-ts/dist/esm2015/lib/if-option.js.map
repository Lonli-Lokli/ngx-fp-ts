{"version":3,"file":"if-option.js","sourceRoot":"D:/Projects/github_wmaurer/ngx-fp-ts/libs/ngx-fp-ts/src/","sources":["lib/if-option.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Option, isNone, isSome } from 'fp-ts/Option';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifSome]' })\r\nexport class IfSome {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifSome(option: Option<any>) {\r\n        testIsAnOption(option, 'ifSome');\r\n        if (isSome(option)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = option.value;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = undefined;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifNone]' })\r\nexport class IfNone {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifNone(option: Option<any>) {\r\n        testIsAnOption(option, 'ifNone');\r\n        this.context.$implicit = undefined;\r\n        if (isNone(option)) {\r\n            this.context.ifTrue = true;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnOption(option: any, directiveName: string) {\r\n    const isAnOption = !!option && typeof option === 'object' && (isSome(option) || isNone(option));\r\n    if (!isAnOption) {\r\n        throw new Error(`Error in ${directiveName} directive. ${option} is not an fp-ts Option!`);\r\n    }\r\n}\r\n"]}