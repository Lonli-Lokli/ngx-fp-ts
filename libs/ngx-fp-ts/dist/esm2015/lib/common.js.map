{"version":3,"file":"common.js","sourceRoot":"D:/Projects/github_wmaurer/ngx-fp-ts/libs/ngx-fp-ts/src/","sources":["lib/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkD,UAAU,IAAI,SAAS,EAAE,MAAM,eAAe,CAAC;AAMxG,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAc,EAAE,CAAC,CAAC;IAC9C,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,KAAK;CAChB,CAAC,CAAC;AASH,MAAM,CAAC,MAAM,WAAW,GAAG,GAAS,EAAE,CAAC,CAAC;IACpC,aAAa,EAAE,IAAI;IACnB,eAAe,EAAE,IAAI;IACrB,eAAe,EAAE,IAAI;IACrB,WAAW,EAAE,IAAI;IACjB,WAAW,EAAE,IAAI;CACpB,CAAC,CAAC;AAEH,MAAM,UAAU,UAAU,CAAC,OAAkB,EAAE,IAAU;IACrD,IAAI,OAAO,CAAC,MAAM,EAAE;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;aAC3F;SACJ;KACJ;SAAM;QACH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;aAC3F;SACJ;KACJ;AACL,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,QAAgB,EAAE,WAAoC;IACjF,MAAM,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC/E,IAAI,CAAC,mBAAmB,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,GAAG,QAAQ,yCAAyC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACnG;AACL,CAAC","sourcesContent":["import { EmbeddedViewRef, TemplateRef, ViewContainerRef, Éµstringify as stringify } from '@angular/core';\r\n\r\nexport interface IfContext {\r\n    $implicit: any;\r\n    ifTrue: boolean;\r\n}\r\nexport const initialIfContext = (): IfContext => ({\r\n    $implicit: null,\r\n    ifTrue: false,\r\n});\r\n\r\nexport interface Refs {\r\n    viewContainer: ViewContainerRef;\r\n    thenTemplateRef: TemplateRef<IfContext> | null;\r\n    elseTemplateRef: TemplateRef<IfContext> | null;\r\n    thenViewRef: EmbeddedViewRef<IfContext> | null;\r\n    elseViewRef: EmbeddedViewRef<IfContext> | null;\r\n}\r\nexport const initialRefs = (): Refs => ({\r\n    viewContainer: null,\r\n    thenTemplateRef: null,\r\n    elseTemplateRef: null,\r\n    thenViewRef: null,\r\n    elseViewRef: null,\r\n});\r\n\r\nexport function updateView(context: IfContext, refs: Refs) {\r\n    if (context.ifTrue) {\r\n        if (!refs.thenViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.elseViewRef = null;\r\n            if (refs.thenTemplateRef) {\r\n                refs.thenViewRef = refs.viewContainer.createEmbeddedView(refs.thenTemplateRef, context);\r\n            }\r\n        }\r\n    } else {\r\n        if (!refs.elseViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.thenViewRef = null;\r\n            if (refs.elseTemplateRef) {\r\n                refs.elseViewRef = refs.viewContainer.createEmbeddedView(refs.elseTemplateRef, context);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function assertTemplate(property: string, templateRef: TemplateRef<any> | null): void {\r\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\r\n    if (!isTemplateRefOrNull) {\r\n        throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\r\n    }\r\n}\r\n"]}