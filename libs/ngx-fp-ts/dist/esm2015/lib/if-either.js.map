{"version":3,"file":"if-either.js","sourceRoot":"D:/Projects/github_wmaurer/ngx-fp-ts/libs/ngx-fp-ts/src/","sources":["lib/if-either.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { Either, isRight, isLeft } from 'fp-ts/Either';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifRight]' })\r\nexport class IfRight {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifRight(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifRight');\r\n        if (isRight(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.right;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.left;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifLeft]' })\r\nexport class IfLeft {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifLeft(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifLeft');\r\n        if (isLeft(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.left;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.right;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnEither(either: any, directiveName: string) {\r\n    const isAnEither = !!either && typeof either === 'object' && (isRight(either) || isLeft(either));\r\n    if (!isAnEither) {\r\n        throw new Error(`Error in ${directiveName} directive. ${either} is not an fp-ts Either!`);\r\n    }\r\n}\r\n"]}