{"version":3,"file":"ngx-fp-ts.umd.js","sources":["../../src/lib/common.ts","../../src/lib/if-either.ts","../../src/lib/if-option.ts","../../src/lib/ngx-fp-ts.module.ts","../../src/ngx-fp-ts.ts"],"sourcesContent":["import { EmbeddedViewRef, TemplateRef, ViewContainerRef, Éµstringify as stringify } from '@angular/core';\r\n\r\nexport interface IfContext {\r\n    $implicit: any;\r\n    ifTrue: boolean;\r\n}\r\nexport const initialIfContext = (): IfContext => ({\r\n    $implicit: null,\r\n    ifTrue: false,\r\n});\r\n\r\nexport interface Refs {\r\n    viewContainer: ViewContainerRef;\r\n    thenTemplateRef: TemplateRef<IfContext> | null;\r\n    elseTemplateRef: TemplateRef<IfContext> | null;\r\n    thenViewRef: EmbeddedViewRef<IfContext> | null;\r\n    elseViewRef: EmbeddedViewRef<IfContext> | null;\r\n}\r\nexport const initialRefs = (): Refs => ({\r\n    viewContainer: null,\r\n    thenTemplateRef: null,\r\n    elseTemplateRef: null,\r\n    thenViewRef: null,\r\n    elseViewRef: null,\r\n});\r\n\r\nexport function updateView(context: IfContext, refs: Refs) {\r\n    if (context.ifTrue) {\r\n        if (!refs.thenViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.elseViewRef = null;\r\n            if (refs.thenTemplateRef) {\r\n                refs.thenViewRef = refs.viewContainer.createEmbeddedView(refs.thenTemplateRef, context);\r\n            }\r\n        }\r\n    } else {\r\n        if (!refs.elseViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.thenViewRef = null;\r\n            if (refs.elseTemplateRef) {\r\n                refs.elseViewRef = refs.viewContainer.createEmbeddedView(refs.elseTemplateRef, context);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function assertTemplate(property: string, templateRef: TemplateRef<any> | null): void {\r\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\r\n    if (!isTemplateRefOrNull) {\r\n        throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\r\n    }\r\n}\r\n","import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { Either, isRight, isLeft } from 'fp-ts/Either';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifRight]' })\r\nexport class IfRight {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifRight(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifRight');\r\n        if (isRight(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.right;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.left;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifLeft]' })\r\nexport class IfLeft {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifLeft(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifLeft');\r\n        if (isLeft(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.left;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.right;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnEither(either: any, directiveName: string) {\r\n    const isAnEither = !!either && typeof either === 'object' && (isRight(either) || isLeft(either));\r\n    if (!isAnEither) {\r\n        throw new Error(`Error in ${directiveName} directive. ${either} is not an fp-ts Either!`);\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Option, isNone, isSome } from 'fp-ts/Option';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifSome]' })\r\nexport class IfSome {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifSome(option: Option<any>) {\r\n        testIsAnOption(option, 'ifSome');\r\n        if (isSome(option)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = option.value;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = undefined;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifNone]' })\r\nexport class IfNone {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifNone(option: Option<any>) {\r\n        testIsAnOption(option, 'ifNone');\r\n        this.context.$implicit = undefined;\r\n        if (isNone(option)) {\r\n            this.context.ifTrue = true;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnOption(option: any, directiveName: string) {\r\n    const isAnOption = !!option && typeof option === 'object' && (isSome(option) || isNone(option));\r\n    if (!isAnOption) {\r\n        throw new Error(`Error in ${directiveName} directive. ${option} is not an fp-ts Option!`);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\n\nimport { IfLeft, IfRight } from './if-either';\nimport { IfSome, IfNone } from './if-option';\n\nconst COMPONENTS = [IfLeft, IfRight, IfSome, IfNone];\n\n@NgModule({\n    declarations: COMPONENTS,\n    exports: COMPONENTS,\n})\nexport class NgxFpTsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["stringify","isRight","Directive","Input","isLeft","isSome","isNone","NgModule"],"mappings":"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"}