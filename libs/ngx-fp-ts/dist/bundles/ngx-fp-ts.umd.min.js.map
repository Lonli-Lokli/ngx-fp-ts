{"version":3,"sources":["../../src/lib/common.ts","../../src/lib/if-either.ts","../../src/lib/if-option.ts","../../src/lib/ngx-fp-ts.module.ts"],"names":["updateView","context","refs","ifTrue","thenViewRef","viewContainer","clear","elseViewRef","thenTemplateRef","createEmbeddedView","elseTemplateRef","assertTemplate","property","templateRef","Error","stringify","IfRight","this","$implicit","Object","defineProperty","prototype","either","testIsAnEither","isRight","right","left","i0","ɵɵdirectiveInject","ViewContainerRef","TemplateRef","selectors","inputs","ifRight","ifRightThen","ifRightElse","IfLeft","isLeft","directiveName","ifLeft","ifLeftThen","ifLeftElse","IfSome","option","testIsAnOption","isSome","value","undefined","ifSome","ifSomeThen","ifSomeElse","IfNone","isNone","ifNone","ifNoneThen","ifNoneElse","NgxFpTsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { EmbeddedViewRef, TemplateRef, ViewContainerRef, ɵstringify as stringify } from '@angular/core';\r\n\r\nexport interface IfContext {\r\n    $implicit: any;\r\n    ifTrue: boolean;\r\n}\r\nexport const initialIfContext = (): IfContext => ({\r\n    $implicit: null,\r\n    ifTrue: false,\r\n});\r\n\r\nexport interface Refs {\r\n    viewContainer: ViewContainerRef;\r\n    thenTemplateRef: TemplateRef<IfContext> | null;\r\n    elseTemplateRef: TemplateRef<IfContext> | null;\r\n    thenViewRef: EmbeddedViewRef<IfContext> | null;\r\n    elseViewRef: EmbeddedViewRef<IfContext> | null;\r\n}\r\nexport const initialRefs = (): Refs => ({\r\n    viewContainer: null,\r\n    thenTemplateRef: null,\r\n    elseTemplateRef: null,\r\n    thenViewRef: null,\r\n    elseViewRef: null,\r\n});\r\n\r\nexport function updateView(context: IfContext, refs: Refs) {\r\n    if (context.ifTrue) {\r\n        if (!refs.thenViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.elseViewRef = null;\r\n            if (refs.thenTemplateRef) {\r\n                refs.thenViewRef = refs.viewContainer.createEmbeddedView(refs.thenTemplateRef, context);\r\n            }\r\n        }\r\n    } else {\r\n        if (!refs.elseViewRef) {\r\n            refs.viewContainer.clear();\r\n            refs.thenViewRef = null;\r\n            if (refs.elseTemplateRef) {\r\n                refs.elseViewRef = refs.viewContainer.createEmbeddedView(refs.elseTemplateRef, context);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function assertTemplate(property: string, templateRef: TemplateRef<any> | null): void {\r\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\r\n    if (!isTemplateRefOrNull) {\r\n        throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\r\n    }\r\n}\r\n","import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { Either, isRight, isLeft } from 'fp-ts/Either';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifRight]' })\r\nexport class IfRight {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifRight(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifRight');\r\n        if (isRight(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.right;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.left;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifRightElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifRightElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifLeft]' })\r\nexport class IfLeft {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifLeft(either: Either<any, any>) {\r\n        testIsAnEither(either, 'ifLeft');\r\n        if (isLeft(either)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = either.left;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = either.right;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifLeftElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifLeftElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnEither(either: any, directiveName: string) {\r\n    const isAnEither = !!either && typeof either === 'object' && (isRight(either) || isLeft(either));\r\n    if (!isAnEither) {\r\n        throw new Error(`Error in ${directiveName} directive. ${either} is not an fp-ts Either!`);\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Option, isNone, isSome } from 'fp-ts/Option';\r\n\r\nimport { initialIfContext, initialRefs, IfContext, assertTemplate, updateView } from './common';\r\n\r\n@Directive({ selector: '[ifSome]' })\r\nexport class IfSome {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifSome(option: Option<any>) {\r\n        testIsAnOption(option, 'ifSome');\r\n        if (isSome(option)) {\r\n            this.context.ifTrue = true;\r\n            this.context.$implicit = option.value;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n            this.context.$implicit = undefined;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifSomeElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifSomeElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[ifNone]' })\r\nexport class IfNone {\r\n    private context = initialIfContext();\r\n\r\n    private refs = initialRefs();\r\n\r\n    constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<IfContext>) {\r\n        this.refs.viewContainer = viewContainer;\r\n        this.refs.thenTemplateRef = templateRef;\r\n    }\r\n\r\n    @Input()\r\n    set ifNone(option: Option<any>) {\r\n        testIsAnOption(option, 'ifNone');\r\n        this.context.$implicit = undefined;\r\n        if (isNone(option)) {\r\n            this.context.ifTrue = true;\r\n        } else {\r\n            this.context.ifTrue = false;\r\n        }\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneThen(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneThen', templateRef);\r\n        this.refs.thenTemplateRef = templateRef;\r\n        this.refs.thenViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n\r\n    @Input()\r\n    set ifNoneElse(templateRef: TemplateRef<IfContext> | null) {\r\n        assertTemplate('ifNoneElse', templateRef);\r\n        this.refs.elseTemplateRef = templateRef;\r\n        this.refs.elseViewRef = null;\r\n        updateView(this.context, this.refs);\r\n    }\r\n}\r\n\r\nfunction testIsAnOption(option: any, directiveName: string) {\r\n    const isAnOption = !!option && typeof option === 'object' && (isSome(option) || isNone(option));\r\n    if (!isAnOption) {\r\n        throw new Error(`Error in ${directiveName} directive. ${option} is not an fp-ts Option!`);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\n\nimport { IfLeft, IfRight } from './if-either';\nimport { IfSome, IfNone } from './if-option';\n\nconst COMPONENTS = [IfLeft, IfRight, IfSome, IfNone];\n\n@NgModule({\n    declarations: COMPONENTS,\n    exports: COMPONENTS,\n})\nexport class NgxFpTsModule {}\n"]}